/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/api/indexer/lastFinalizedBlock": {
    /** Get the last finalized block */
    get: operations["lastFinalizedBlock"];
  };
  "/api/indexer/merkleTree/{blockNumber}": {
    /** Get the MerkleTree that was in the OutboxUtxo at the given blockNumber */
    get: operations["merkleTreeByBlockNumber"];
  };
  "/api/indexer/messages/{fromBlock}/{toBlock}": {
    /** Get messages from fromBlock to toBlock */
    get: operations["messagesByBlockRange"];
  };
}

export type webhooks = Record<string, never>;

export type components = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /** Get the last finalized block */
  lastFinalizedBlock: {
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "application/json": {
            /** @example 10 */
            lastFinalizedBlock?: number;
          };
        };
      };
    };
  };
  /** Get the MerkleTree that was in the OutboxUtxo at the given blockNumber */
  merkleTreeByBlockNumber: {
    parameters: {
      path: {
        /** @description Block number to retrieve the MerkleTree */
        blockNumber: number;
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "application/json": {
            /** @example 5 */
            blockNumber: number;
            merkleTree: {
              /** @example 1 */
              count: number;
              /**
               * @example [
               *   "0x3b3153b5b2c1c50efca4b92a3804a037ceb79769545f8f4f85dec3bdbbaa7df5",
               *   "0x0000000000000000000000000000000000000000000000000000000000000000",
               *   "0x0000000000000000000000000000000000000000000000000000000000000000",
               *   "0x0000000000000000000000000000000000000000000000000000000000000000",
               *   "0x0000000000000000000000000000000000000000000000000000000000000000",
               *   "0x0000000000000000000000000000000000000000000000000000000000000000",
               *   "0x0000000000000000000000000000000000000000000000000000000000000000",
               *   "0x0000000000000000000000000000000000000000000000000000000000000000",
               *   "0x0000000000000000000000000000000000000000000000000000000000000000",
               *   "0x0000000000000000000000000000000000000000000000000000000000000000",
               *   "0x0000000000000000000000000000000000000000000000000000000000000000",
               *   "0x0000000000000000000000000000000000000000000000000000000000000000",
               *   "0x0000000000000000000000000000000000000000000000000000000000000000",
               *   "0x0000000000000000000000000000000000000000000000000000000000000000",
               *   "0x0000000000000000000000000000000000000000000000000000000000000000",
               *   "0x0000000000000000000000000000000000000000000000000000000000000000",
               *   "0x0000000000000000000000000000000000000000000000000000000000000000",
               *   "0x0000000000000000000000000000000000000000000000000000000000000000",
               *   "0x0000000000000000000000000000000000000000000000000000000000000000",
               *   "0x0000000000000000000000000000000000000000000000000000000000000000",
               *   "0x0000000000000000000000000000000000000000000000000000000000000000",
               *   "0x0000000000000000000000000000000000000000000000000000000000000000",
               *   "0x0000000000000000000000000000000000000000000000000000000000000000",
               *   "0x0000000000000000000000000000000000000000000000000000000000000000",
               *   "0x0000000000000000000000000000000000000000000000000000000000000000",
               *   "0x0000000000000000000000000000000000000000000000000000000000000000",
               *   "0x0000000000000000000000000000000000000000000000000000000000000000",
               *   "0x0000000000000000000000000000000000000000000000000000000000000000",
               *   "0x0000000000000000000000000000000000000000000000000000000000000000",
               *   "0x0000000000000000000000000000000000000000000000000000000000000000",
               *   "0x0000000000000000000000000000000000000000000000000000000000000000",
               *   "0x0000000000000000000000000000000000000000000000000000000000000000"
               * ]
               */
              branches: (string)[];
            };
          };
        };
      };
    };
  };
  /** Get messages from fromBlock to toBlock */
  messagesByBlockRange: {
    parameters: {
      path: {
        /** @description Start block number */
        fromBlock: number;
        /** @description End block number */
        toBlock: number;
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "application/json": {
            messages: ({
                /** @example 3 */
                block: number;
                message: {
                  /** @example 0 */
                  version: number;
                  /** @example 0 */
                  nonce: number;
                  /** @example 0xEF */
                  originDomain: string;
                  /** @example 0x0000000000000000000000000000000000000CA1 */
                  sender: string;
                  /** @example 0xCA */
                  destinationDomain: string;
                  /** @example 0x0000000000000000000000000000000000000EA1 */
                  recipient: string;
                  /** @example 0xADA */
                  body: string;
                };
              })[];
          };
        };
      };
    };
  };
}
