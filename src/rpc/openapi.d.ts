/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/api/indexer/lastFinalizedBlock": {
    /** Get the last finalized block */
    get: operations["lastFinalizedBlock"];
  };
  "/api/indexer/merkleTree": {
    /** Retrieve the MerkleTree of the latest (finalized) alive Outbox (UTXO) */
    get: operations["merkleTree"];
  };
  "/api/indexer/messages/{fromBlock}/{toBlock}": {
    /** Get messages from fromBlock to toBlock */
    get: operations["messagesByBlockRange"];
  };
  "/api/validator-announcement/get-storage-locations/": {
    /** Returns storage locations for the given validators addresses (0x prefixed 32 bytes, total length of 66 characters) */
    post: operations["getValidatorStorageLocations"];
  };
  "/api/inbox/ism-parameters": {
    /** Get the inbox ISM parameters */
    get: operations["inboxIsmParameters"];
  };
  "/api/inbox/is-message-delivered/{messageId}": {
    /** Check if an inbox message was delivered */
    get: operations["isInboxMessageDelivered"];
  };
  "/api/inbox/estimate-message-fee": {
    /** Estimate the fee in ADA to deliver an inbound message */
    post: operations["estimateInboundMessageFee"];
  };
  "/api/inbox/submit-message": {
    /** Submit an new inbound message */
    post: operations["submitInboundMessage"];
  };
  "/api/outbox/get-message-gas-payment": {
    /** Get the outbound gas payment for a message to a relayer */
    post: operations["getOutboundGasPayment"];
  };
}

export type webhooks = Record<string, never>;

export type components = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /** Get the last finalized block */
  lastFinalizedBlock: {
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "application/json": {
            /** @example 10 */
            lastFinalizedBlock?: number;
          };
        };
      };
    };
  };
  /** Retrieve the MerkleTree of the latest (finalized) alive Outbox (UTXO) */
  merkleTree: {
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "application/json": {
            /** @example 5 */
            blockNumber: number;
            merkleTree: {
              /** @example 1 */
              count: number;
              branches: string[];
            };
          };
        };
      };
    };
  };
  /** Get messages from fromBlock to toBlock */
  messagesByBlockRange: {
    parameters: {
      path: {
        /** @description Start block number */
        fromBlock: number;
        /** @description End block number */
        toBlock: number;
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "application/json": {
            messages: {
                /** @example 3 */
                block: number;
                message: {
                  version: number;
                  nonce: number;
                  originDomain: number;
                  sender: string;
                  destinationDomain: number;
                  recipient: string;
                  body: string;
                };
              }[];
          };
        };
      };
    };
  };
  /** Returns storage locations for the given validators addresses (0x prefixed 32 bytes, total length of 66 characters) */
  getValidatorStorageLocations: {
    requestBody: {
      content: {
        "application/json": {
          validatorAddresses: string[];
        };
      };
    };
    responses: {
      /** @description A list of validator addresses (0x prefix 32 bytes, total length of 66 characters) with their corresponding storage locations. This list may not contain some addresses passed in the input, meaning that locations of those validators are not known. */
      200: {
        content: {
          "application/json": {
            validatorStorageLocations: {
                validatorAddress: string;
                storageLocation: string;
              }[];
          };
        };
      };
    };
  };
  /** Get the inbox ISM parameters */
  inboxIsmParameters: {
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "application/json": {
            validators: string[];
            threshold: number;
          };
        };
      };
    };
  };
  /** Check if an inbox message was delivered */
  isInboxMessageDelivered: {
    parameters: {
      path: {
        /** @description The message id to check */
        messageId: string;
      };
    };
    responses: {
      /** @description A boolean value whether the message was delivered */
      200: {
        content: {
          "application/json": {
            isDelivered: boolean;
          };
        };
      };
    };
  };
  /** Estimate the fee in ADA to deliver an inbound message */
  estimateInboundMessageFee: {
    requestBody: {
      content: {
        "application/json": {
          relayerCardanoAddress: string;
          origin: number;
          originMailbox: string;
          checkpointRoot: string;
          checkpointIndex: number;
          message: {
            version: number;
            nonce: number;
            originDomain: number;
            sender: string;
            destinationDomain: number;
            recipient: string;
            message: string;
          };
          signatures: string[];
        };
      };
    };
    responses: {
      /** @description The estimated fee in ADA to deliver the inbound message */
      200: {
        content: {
          "application/json": {
            feeLovelace: number;
          };
        };
      };
    };
  };
  /** Submit an new inbound message */
  submitInboundMessage: {
    requestBody: {
      content: {
        "application/json": {
          relayerCardanoAddress: string;
          privateKey: string;
          origin: number;
          originMailbox: string;
          checkpointRoot: string;
          checkpointIndex: number;
          message: {
            version: number;
            nonce: number;
            originDomain: number;
            sender: string;
            destinationDomain: number;
            recipient: string;
            message: string;
          };
          signatures: string[];
        };
      };
    };
    responses: {
      /** @description The tx id of the inbound message on Cardano */
      200: {
        content: {
          "application/json": {
            txId: string;
          };
        };
      };
    };
  };
  /** Get the outbound gas payment for a message to a relayer */
  getOutboundGasPayment: {
    requestBody: {
      content: {
        "application/json": {
          relayerAddress: string;
          messageId: string;
        };
      };
    };
    responses: {
      /** @description The total amount of gas paid to the relayer for the message */
      200: {
        content: {
          "application/json": {
            totalGasLovelace: number;
          };
        };
      };
    };
  };
}
