/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/api/indexer/lastFinalizedBlock": {
    /** Get the last finalized block */
    get: operations["lastFinalizedBlock"];
  };
  "/api/indexer/merkleTree": {
    /** Retrieve the MerkleTree of the latest (finalized) alive Outbox (UTXO) */
    get: operations["merkleTree"];
  };
  "/api/indexer/messages/{fromBlock}/{toBlock}": {
    /** Get messages from fromBlock to toBlock */
    get: operations["messagesByBlockRange"];
  };
  "/api/validator-announcement/get-storage-locations/": {
    /** Returns storage locations for the given validators addresses (0x prefixed 32 bytes, total length of 66 characters) */
    post: operations["getValidatorStorageLocations"];
  };
}

export type webhooks = Record<string, never>;

export type components = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /** Get the last finalized block */
  lastFinalizedBlock: {
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "application/json": {
            /** @example 10 */
            lastFinalizedBlock?: number;
          };
        };
      };
    };
  };
  /** Retrieve the MerkleTree of the latest (finalized) alive Outbox (UTXO) */
  merkleTree: {
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "application/json": {
            /** @example 5 */
            blockNumber: number;
            merkleTree: {
              /** @example 1 */
              count: number;
              branches: (string)[];
            };
          };
        };
      };
    };
  };
  /** Get messages from fromBlock to toBlock */
  messagesByBlockRange: {
    parameters: {
      path: {
        /** @description Start block number */
        fromBlock: number;
        /** @description End block number */
        toBlock: number;
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "application/json": {
            messages: ({
                /** @example 3 */
                block: number;
                message: {
                  version: number;
                  nonce: number;
                  originDomain: number;
                  sender: string;
                  destinationDomain: number;
                  recipient: string;
                  body: string;
                };
              })[];
          };
        };
      };
    };
  };
  /** Returns storage locations for the given validators addresses (0x prefixed 32 bytes, total length of 66 characters) */
  getValidatorStorageLocations: {
    requestBody: {
      content: {
        "application/json": {
          validatorAddresses: (string)[];
        };
      };
    };
    responses: {
      /** @description A list of validator addresses (0x prefix 32 bytes, total length of 66 characters) with their corresponding storage locations */
      200: {
        content: {
          "application/json": {
            validatorStorageLocations: ({
                validatorAddress: string;
                storageLocation: string;
              })[];
          };
        };
      };
    };
  };
}
